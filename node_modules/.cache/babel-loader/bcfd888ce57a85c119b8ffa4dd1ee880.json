{"ast":null,"code":"var _jsxFileName = \"/home/nils/programing/swimcalc/src/calculator/calc.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useCalc = () => {\n  _s();\n\n  const [baseTimeMin, setBaseTimeMin] = useState(null);\n  const [baseTimeSec, setBaseTimeSec] = useState(null);\n  React.useEffect(() => {// console.log(\"baseMin: \", baseTimeMin)\n    // console.log(\"baseSec: \", baseTimeSec)\n  });\n\n  const distance = () => {\n    const distanceArray = [\"50\", \"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"700\", \"800\", \"900\", \"1000\", \"1100\", \"1200\", \"1300\", \"1400\", \"1500\"];\n    const returnArray = [];\n    distanceArray.forEach(element => {\n      let position;\n\n      switch (element) {\n        case \"50\":\n          position = 2;\n          break;\n\n        case \"100\":\n          position = 3;\n          break;\n\n        case \"200\":\n          position = 4;\n          break;\n\n        case \"300\":\n          position = 5;\n          break;\n\n        case \"400\":\n          position = 6;\n          break;\n\n        case \"500\":\n          position = 7;\n          break;\n\n        case \"600\":\n          position = 8;\n          break;\n\n        case \"700\":\n          position = 9;\n          break;\n\n        case \"800\":\n          position = 10;\n          break;\n\n        case \"900\":\n          position = 11;\n          break;\n\n        case \"1000\":\n          position = 12;\n          break;\n\n        case \"1100\":\n          position = 13;\n          break;\n\n        case \"1200\":\n          position = 14;\n          break;\n\n        case \"1300\":\n          position = 15;\n          break;\n\n        case \"1400\":\n          position = 16;\n          break;\n\n        case \"1500\":\n          position = 17;\n          break;\n\n        default:\n          position = 18;\n          break;\n      }\n\n      returnArray.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          gridColumn: \"1 / 2\",\n          gridRow: `${position + 1} / ${position + 2}`\n        },\n        className: \"colorDiv\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: element\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, `key${element}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this));\n    });\n    return returnArray;\n  };\n\n  const calculator = e => {\n    // if (e.target.value.toString().indexOf(\".\") > -1) {\n    //     console.log(\"not a number\")\n    //     setBaseTimeMin(null)\n    //     setBaseTimeSec(null)\n    //     return\n    // }\n    if (e.target.value.toString().charAt(0) === \"0\") {\n      e.target.value = e.target.value.toString().replace(\"0\", \"\");\n    }\n\n    if (baseTimeMin === null && baseTimeSec === null) {\n      setBaseTimeMin(0);\n      setBaseTimeSec(0);\n    }\n\n    if (e.target.name === \"min\") {// console.log(\"minutes: \", e.target.value)\n    }\n\n    if (e.target.name === \"sec\") {// console.log(\"seconds: \", e.target.value)\n    } // console.log(e.target.id)\n\n\n    let convert = e.target.id * 2; // value for converting time to 50 meter base\n\n    if (convert === 0) {\n      // if ID === 0, the division will be undefined, and so need to be manually changed\n      convert = 1;\n    }\n\n    if (e.target.name === \"min\") {\n      setBaseTimeMin(e.target.value / convert); // deviding with convert to base time in 50s\n    } else if (e.target.name === \"sec\") {\n      setBaseTimeSec(e.target.value / convert); // deviding with convert to base time in 50s\n    }\n  };\n\n  const time = () => {\n    const returnArray = [];\n\n    for (let i = 0; i < 16; i++) {\n      let min;\n      let sec;\n      let convert = i * 2; // se in function above why this is \n\n      if (convert === 0) {\n        convert = 1;\n      }\n\n      min = baseTimeMin * convert;\n      sec = baseTimeSec * convert;\n\n      const timeCalc = duration => {\n        if (duration >= 60) {\n          // if the duration is more than one minute\n          let min = ~~(duration / 60);\n          let sec = Number.parseFloat(duration % 60).toFixed(2); //let sec = ~~(duration % 60)\n\n          console.log(\"SEC: \", sec);\n          console.log(\"MIN: \", min);\n          return [sec, min];\n        }\n\n        return [duration, 0];\n      };\n\n      let duration = min * 60 + sec;\n      let [secCalc, minCalc] = timeCalc(duration); // console.log(\"CALC: \", secCalc, \" \", minCalc)\n\n      returnArray.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          gridColumn: \"2 / 3\",\n          gridRow: `${i + 3} / ${i + 4}`\n        },\n        className: \"colorDiv timeInputDiv\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: baseTimeMin !== null ? minCalc : \"\",\n          onInput: calculator,\n          id: i,\n          name: \"min\",\n          type: \"number\",\n          placeholder: \"min\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \":\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: baseTimeSec !== null ? secCalc : \"\",\n          onInput: calculator,\n          id: i,\n          name: \"sec\",\n          type: \"number\",\n          placeholder: \"sec\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)]\n      }, `key${i}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this));\n    }\n\n    return returnArray;\n  };\n\n  const resetValues = () => {\n    setBaseTimeMin(null);\n    setBaseTimeSec(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tabellMain\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"resetButtonDiv\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetValues,\n          children: \"RESET\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"colorDiv distanceTitle\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"DISTANCE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), distance(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"colorDiv TimeTitle\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"TIME\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), time()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 9\n  }, this);\n};\n\n_s(useCalc, \"TrYD/+B4J1kFfSDKQvoennW1pSI=\");\n\nexport default useCalc;","map":{"version":3,"sources":["/home/nils/programing/swimcalc/src/calculator/calc.jsx"],"names":["React","useState","useCalc","baseTimeMin","setBaseTimeMin","baseTimeSec","setBaseTimeSec","useEffect","distance","distanceArray","returnArray","forEach","element","position","push","gridColumn","gridRow","calculator","e","target","value","toString","charAt","replace","name","convert","id","time","i","min","sec","timeCalc","duration","Number","parseFloat","toFixed","console","log","secCalc","minCalc","resetValues"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCH,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,IAAD,CAA9C;AAGAD,EAAAA,KAAK,CAACO,SAAN,CAAgB,MAAM,CAClB;AACA;AACH,GAHD;;AAMA,QAAMC,QAAQ,GAAG,MAAM;AACnB,UAAMC,aAAa,GAAG,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,EAAqB,KAArB,EAA4B,KAA5B,EAAmC,KAAnC,EAA0C,KAA1C,EAAiD,KAAjD,EAAwD,KAAxD,EAA+D,KAA/D,EAAsE,MAAtE,EAA8E,MAA9E,EAAsF,MAAtF,EAA8F,MAA9F,EAAsG,MAAtG,EAA8G,MAA9G,CAAtB;AACA,UAAMC,WAAW,GAAG,EAApB;AACAD,IAAAA,aAAa,CAACE,OAAd,CAAuBC,OAAD,IAAa;AAC/B,UAAIC,QAAJ;;AACA,cAAQD,OAAR;AACI,aAAK,IAAL;AACIC,UAAAA,QAAQ,GAAG,CAAX;AACA;;AACJ,aAAK,KAAL;AACIA,UAAAA,QAAQ,GAAG,CAAX;AACA;;AACJ,aAAK,KAAL;AACIA,UAAAA,QAAQ,GAAG,CAAX;AACA;;AACJ,aAAK,KAAL;AACIA,UAAAA,QAAQ,GAAG,CAAX;AACA;;AACJ,aAAK,KAAL;AACIA,UAAAA,QAAQ,GAAG,CAAX;AACA;;AACJ,aAAK,KAAL;AACIA,UAAAA,QAAQ,GAAG,CAAX;AACA;;AACJ,aAAK,KAAL;AACIA,UAAAA,QAAQ,GAAG,CAAX;AACA;;AACJ,aAAK,KAAL;AACIA,UAAAA,QAAQ,GAAG,CAAX;AACA;;AACJ,aAAK,KAAL;AACIA,UAAAA,QAAQ,GAAG,EAAX;AACA;;AACJ,aAAK,KAAL;AACIA,UAAAA,QAAQ,GAAG,EAAX;AACA;;AACJ,aAAK,MAAL;AACIA,UAAAA,QAAQ,GAAG,EAAX;AACA;;AACJ,aAAK,MAAL;AACIA,UAAAA,QAAQ,GAAG,EAAX;AACA;;AACJ,aAAK,MAAL;AACIA,UAAAA,QAAQ,GAAG,EAAX;AACA;;AACJ,aAAK,MAAL;AACIA,UAAAA,QAAQ,GAAG,EAAX;AACA;;AACJ,aAAK,MAAL;AACIA,UAAAA,QAAQ,GAAG,EAAX;AACA;;AACJ,aAAK,MAAL;AACIA,UAAAA,QAAQ,GAAG,EAAX;AACA;;AACJ;AACIA,UAAAA,QAAQ,GAAG,EAAX;AACA;AAnDR;;AAqDAH,MAAAA,WAAW,CAACI,IAAZ,eACI;AAA2B,QAAA,KAAK,EAAE;AAC9BC,UAAAA,UAAU,EAAE,OADkB;AAE9BC,UAAAA,OAAO,EAAG,GAAEH,QAAQ,GAAG,CAAE,MAAKA,QAAQ,GAAG,CAAE;AAFb,SAAlC;AAGG,QAAA,SAAS,EAAC,UAHb;AAAA,+BAII;AAAA,oBAAOD;AAAP;AAAA;AAAA;AAAA;AAAA;AAJJ,SAAW,MAAKA,OAAQ,EAAxB;AAAA;AAAA;AAAA;AAAA,cADJ;AAQH,KA/DD;AAgEA,WAAOF,WAAP;AACH,GApED;;AAsEA,QAAMO,UAAU,GAAIC,CAAD,IAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,QAAIA,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,QAAf,GAA0BC,MAA1B,CAAiC,CAAjC,MAAwC,GAA5C,EAAiD;AAC7CJ,MAAAA,CAAC,CAACC,MAAF,CAASC,KAAT,GAAiBF,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,QAAf,GAA0BE,OAA1B,CAAkC,GAAlC,EAAuC,EAAvC,CAAjB;AACH;;AACD,QAAIpB,WAAW,KAAK,IAAhB,IAAwBE,WAAW,KAAK,IAA5C,EAAkD;AAC9CD,MAAAA,cAAc,CAAC,CAAD,CAAd;AACAE,MAAAA,cAAc,CAAC,CAAD,CAAd;AACH;;AACD,QAAIY,CAAC,CAACC,MAAF,CAASK,IAAT,KAAkB,KAAtB,EAA6B,CACzB;AACH;;AACD,QAAIN,CAAC,CAACC,MAAF,CAASK,IAAT,KAAkB,KAAtB,EAA6B,CACzB;AACH,KAnBqB,CAqBtB;;;AAEA,QAAIC,OAAO,GAAGP,CAAC,CAACC,MAAF,CAASO,EAAT,GAAc,CAA5B,CAvBsB,CAuBQ;;AAC9B,QAAID,OAAO,KAAK,CAAhB,EAAmB;AAAE;AACjBA,MAAAA,OAAO,GAAG,CAAV;AACH;;AAED,QAAIP,CAAC,CAACC,MAAF,CAASK,IAAT,KAAkB,KAAtB,EAA6B;AACzBpB,MAAAA,cAAc,CAACc,CAAC,CAACC,MAAF,CAASC,KAAT,GAAiBK,OAAlB,CAAd,CADyB,CACgB;AAC5C,KAFD,MAEO,IAAIP,CAAC,CAACC,MAAF,CAASK,IAAT,KAAkB,KAAtB,EAA6B;AAChClB,MAAAA,cAAc,CAACY,CAAC,CAACC,MAAF,CAASC,KAAT,GAAiBK,OAAlB,CAAd,CADgC,CACS;AAC5C;AACJ,GAjCD;;AAmCA,QAAME,IAAI,GAAG,MAAM;AACf,UAAMjB,WAAW,GAAG,EAApB;;AACA,SAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,UAAIC,GAAJ;AACA,UAAIC,GAAJ;AACA,UAAIL,OAAO,GAAGG,CAAC,GAAG,CAAlB,CAHyB,CAGL;;AACpB,UAAIH,OAAO,KAAK,CAAhB,EAAmB;AACfA,QAAAA,OAAO,GAAG,CAAV;AACH;;AACDI,MAAAA,GAAG,GAAG1B,WAAW,GAAGsB,OAApB;AACAK,MAAAA,GAAG,GAAGzB,WAAW,GAAGoB,OAApB;;AAEA,YAAMM,QAAQ,GAAIC,QAAD,IAAc;AAC3B,YAAIA,QAAQ,IAAI,EAAhB,EAAoB;AAAE;AAClB,cAAIH,GAAG,GAAG,CAAC,EAAEG,QAAQ,GAAG,EAAb,CAAX;AACA,cAAIF,GAAG,GAAGG,MAAM,CAACC,UAAP,CAAkBF,QAAQ,GAAG,EAA7B,EAAiCG,OAAjC,CAAyC,CAAzC,CAAV,CAFgB,CAGhB;;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBP,GAArB;AACAM,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBR,GAArB;AACA,iBAAO,CAACC,GAAD,EAAMD,GAAN,CAAP;AACH;;AACD,eAAO,CAACG,QAAD,EAAW,CAAX,CAAP;AACH,OAVD;;AAWA,UAAIA,QAAQ,GAAIH,GAAG,GAAG,EAAP,GAAaC,GAA5B;AACA,UAAI,CAACQ,OAAD,EAAUC,OAAV,IAAqBR,QAAQ,CAACC,QAAD,CAAjC,CAtByB,CAwBzB;;AACAtB,MAAAA,WAAW,CAACI,IAAZ,eACI;AAAqB,QAAA,KAAK,EAAE;AACxBC,UAAAA,UAAU,EAAE,OADY;AAExBC,UAAAA,OAAO,EAAG,GAAEY,CAAC,GAAG,CAAE,MAAKA,CAAC,GAAG,CAAE;AAFL,SAA5B;AAGG,QAAA,SAAS,EAAC,uBAHb;AAAA,gCAII;AAAO,UAAA,KAAK,EAAEzB,WAAW,KAAK,IAAhB,GAAuBoC,OAAvB,GAAiC,EAA/C;AAAmD,UAAA,OAAO,EAAEtB,UAA5D;AAAwE,UAAA,EAAE,EAAEW,CAA5E;AAA+E,UAAA,IAAI,EAAC,KAApF;AAA0F,UAAA,IAAI,EAAC,QAA/F;AAAwG,UAAA,WAAW,EAAC;AAApH;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAO,UAAA,KAAK,EAAEvB,WAAW,KAAK,IAAhB,GAAuBiC,OAAvB,GAAiC,EAA/C;AAAmD,UAAA,OAAO,EAAErB,UAA5D;AAAwE,UAAA,EAAE,EAAEW,CAA5E;AAA+E,UAAA,IAAI,EAAC,KAApF;AAA0F,UAAA,IAAI,EAAC,QAA/F;AAAwG,UAAA,WAAW,EAAC;AAApH;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA,SAAW,MAAKA,CAAE,EAAlB;AAAA;AAAA;AAAA;AAAA,cADJ;AAUH;;AACD,WAAOlB,WAAP;AACH,GAvCD;;AAyCA,QAAM8B,WAAW,GAAG,MAAM;AACtBpC,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAE,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH,GAHD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,+BACI;AAAQ,UAAA,OAAO,EAAEkC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAJJ,EAOKhC,QAAQ,EAPb,eAQI;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cARJ,EAWKmB,IAAI,EAXT;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CAnLD;;GAAMzB,O;;AAqLN,eAAeA,OAAf","sourcesContent":["import React, { useState } from \"react\";\n\nconst useCalc = () => {\n    const [baseTimeMin, setBaseTimeMin] = useState(null)\n    const [baseTimeSec, setBaseTimeSec] = useState(null)\n\n\n    React.useEffect(() => {\n        // console.log(\"baseMin: \", baseTimeMin)\n        // console.log(\"baseSec: \", baseTimeSec)\n    })\n\n\n    const distance = () => {\n        const distanceArray = [\"50\", \"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"700\", \"800\", \"900\", \"1000\", \"1100\", \"1200\", \"1300\", \"1400\", \"1500\"]\n        const returnArray = []\n        distanceArray.forEach((element) => {\n            let position\n            switch (element) {\n                case \"50\":\n                    position = 2\n                    break;\n                case \"100\":\n                    position = 3\n                    break;\n                case \"200\":\n                    position = 4\n                    break;\n                case \"300\":\n                    position = 5\n                    break;\n                case \"400\":\n                    position = 6\n                    break;\n                case \"500\":\n                    position = 7\n                    break;\n                case \"600\":\n                    position = 8\n                    break;\n                case \"700\":\n                    position = 9\n                    break;\n                case \"800\":\n                    position = 10\n                    break;\n                case \"900\":\n                    position = 11\n                    break;\n                case \"1000\":\n                    position = 12\n                    break;\n                case \"1100\":\n                    position = 13\n                    break;\n                case \"1200\":\n                    position = 14\n                    break;\n                case \"1300\":\n                    position = 15\n                    break;\n                case \"1400\":\n                    position = 16\n                    break;\n                case \"1500\":\n                    position = 17\n                    break;\n                default:\n                    position = 18\n                    break;\n            }\n            returnArray.push(\n                <div key={`key${element}`} style={{\n                    gridColumn: \"1 / 2\",\n                    gridRow: `${position + 1} / ${position + 2}`\n                }} className=\"colorDiv\">\n                    <span>{element}</span>\n                </div>\n            )\n        })\n        return returnArray\n    }\n\n    const calculator = (e) => {\n        // if (e.target.value.toString().indexOf(\".\") > -1) {\n        //     console.log(\"not a number\")\n        //     setBaseTimeMin(null)\n        //     setBaseTimeSec(null)\n        //     return\n        // }\n        if (e.target.value.toString().charAt(0) === \"0\") {\n            e.target.value = e.target.value.toString().replace(\"0\", \"\")\n        }\n        if (baseTimeMin === null && baseTimeSec === null) {\n            setBaseTimeMin(0)\n            setBaseTimeSec(0)\n        }\n        if (e.target.name === \"min\") {\n            // console.log(\"minutes: \", e.target.value)\n        }\n        if (e.target.name === \"sec\") {\n            // console.log(\"seconds: \", e.target.value)\n        }\n\n        // console.log(e.target.id)\n\n        let convert = e.target.id * 2 // value for converting time to 50 meter base\n        if (convert === 0) { // if ID === 0, the division will be undefined, and so need to be manually changed\n            convert = 1\n        }\n\n        if (e.target.name === \"min\") {\n            setBaseTimeMin(e.target.value / convert) // deviding with convert to base time in 50s\n        } else if (e.target.name === \"sec\") {\n            setBaseTimeSec(e.target.value / convert) // deviding with convert to base time in 50s\n        }\n    }\n\n    const time = () => {\n        const returnArray = []\n        for (let i = 0; i < 16; i++) {\n            let min\n            let sec\n            let convert = i * 2 // se in function above why this is \n            if (convert === 0) {\n                convert = 1\n            }\n            min = baseTimeMin * convert\n            sec = baseTimeSec * convert\n\n            const timeCalc = (duration) => {\n                if (duration >= 60) { // if the duration is more than one minute\n                    let min = ~~(duration / 60)\n                    let sec = Number.parseFloat(duration % 60).toFixed(2)\n                    //let sec = ~~(duration % 60)\n                    console.log(\"SEC: \", sec)\n                    console.log(\"MIN: \", min)\n                    return [sec, min]\n                }\n                return [duration, 0]\n            }\n            let duration = (min * 60) + sec\n            let [secCalc, minCalc] = timeCalc(duration)\n\n            // console.log(\"CALC: \", secCalc, \" \", minCalc)\n            returnArray.push(\n                <div key={`key${i}`} style={{\n                    gridColumn: \"2 / 3\",\n                    gridRow: `${i + 3} / ${i + 4}`\n                }} className=\"colorDiv timeInputDiv\">\n                    <input value={baseTimeMin !== null ? minCalc : \"\"} onInput={calculator} id={i} name=\"min\" type=\"number\" placeholder=\"min\" />\n                    <span>:</span>\n                    <input value={baseTimeSec !== null ? secCalc : \"\"} onInput={calculator} id={i} name=\"sec\" type=\"number\" placeholder=\"sec\" />\n                </div>\n            )\n        }\n        return returnArray\n    }\n\n    const resetValues = () => {\n        setBaseTimeMin(null)\n        setBaseTimeSec(null)\n    }\n\n    return (\n        <div className=\"tabellMain\">\n            <div className=\"container\">\n                <div className=\"resetButtonDiv\">\n                    <button onClick={resetValues}>RESET</button>\n                </div>\n                <div className=\"colorDiv distanceTitle\">\n                    <span>DISTANCE</span>\n                </div>\n                {distance()}\n                <div className=\"colorDiv TimeTitle\">\n                    <span>TIME</span>\n                </div>\n                {time()}\n            </div>\n        </div>\n    )\n}\n\nexport default useCalc"]},"metadata":{},"sourceType":"module"}