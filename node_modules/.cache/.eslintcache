[{"/home/nils/programing/swimcalc/src/index.jsx":"1","/home/nils/programing/swimcalc/src/redux/reducers.jsx":"2","/home/nils/programing/swimcalc/src/calculator/calc.jsx":"3","/home/nils/programing/swimcalc/src/landing/landing.jsx":"4","/home/nils/programing/swimcalc/src/kvaltider/kvaltider.jsx":"5","/home/nils/programing/swimcalc/src/relay/relay.jsx":"6"},{"size":6737,"mtime":1675070711259,"results":"7","hashOfConfig":"8"},{"size":2401,"mtime":1668874902232,"results":"9","hashOfConfig":"8"},{"size":6647,"mtime":1675072381355,"results":"10","hashOfConfig":"8"},{"size":6740,"mtime":1675070322421,"results":"11","hashOfConfig":"8"},{"size":8768,"mtime":1675070452305,"results":"12","hashOfConfig":"8"},{"size":14404,"mtime":1669197205363,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1els3qr",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":3,"source":"27","usedDeprecatedRules":"18"},"/home/nils/programing/swimcalc/src/index.jsx",["28"],"/home/nils/programing/swimcalc/src/redux/reducers.jsx",[],["29","30"],"/home/nils/programing/swimcalc/src/calculator/calc.jsx",["31"],"/home/nils/programing/swimcalc/src/landing/landing.jsx",["32","33"],"/home/nils/programing/swimcalc/src/kvaltider/kvaltider.jsx",["34","35","36","37","38","39","40"],"/home/nils/programing/swimcalc/src/relay/relay.jsx",["41","42","43","44","45","46"],"import { store } from \"..\"\nimport axios from \"axios\"\nimport { useState } from \"react\"\nimport { useEffect } from \"react\"\nimport _ from \"lodash\"\nimport moment from \"moment\"\n\nconst User_login = ({setPage, store})=>{\n\n    const getPage = async (name, sur_name) => {\n        store.dispatch({\n            type: \"LOADING\",\n            payload: true\n        })\n        await axios.post(\"/tempus/find\", {\n            name,\n            sur_name\n        })\n            .then(res => {\n                store.dispatch({\n                    type: \"USER_SEARCH_FIELDS\",\n                    payload: res.data\n                })\n            })\n        store.dispatch({\n            type: \"LOADING\",\n            payload: false\n        })\n    }\n\n    const selectUser = async (index) => {\n\n        await store.dispatch({ //adding user gender\n            type: \"RELAY_USER_INFO\",\n            payload: {\n                gender: store.getState().user.searchField[index].gender,\n                name: store.getState().user.searchField[index].name,\n                sur_name: store.getState().user.searchField[index].sur_name,\n                age: store.getState().user.searchField[index].age,\n                status: store.getState().user.searchField[index].status\n            }\n        })\n\n        axios.post(\"/tempus/selectUser\", {\n            id: store.getState().user.searchField[index].id\n        })\n            .then(res => {\n                store.dispatch({\n                    type: \"RELAY_USER_DATA\",\n                    payload: res.data\n                })\n                // add session storage\n                localStorage.setItem(\"relay\", JSON.stringify(store.getState().relay))\n            })\n        \n\n        setPage(\"main\")\n    }\n\n    const inputHandler = (e) => {\n        e.preventDefault()\n        if (e.target.name.value === \"\") {\n            getPage(\"nils\", \"malmberg\")\n            return\n        }\n        getPage(e.target.name.value, e.target.surName.value)\n    }\n\n    const displayList = () => {\n        let retrunArr = []\n        if (store.getState()?.user?.searchField === undefined) return\n        store.getState().user.searchField.forEach((element, index) => {\n            const e = (\n                <div key={_.uniqueId()} className=\"listEDefault\" onClick={() => selectUser(index)} style={{ gridRow: `${index + 1}/${index + 2}` }}>\n                    <div key={_.uniqueId()} className=\"nameDiv\">\n                        <span key={_.uniqueId()}>{element.name + \" \" + element.sur_name}</span>\n                    </div>\n                    <div key={_.uniqueId()} className=\"ageDiv\">\n                        <span key={_.uniqueId()}>{element.age}</span>\n                    </div>\n                    <div key={_.uniqueId()} className=\"genderDiv\">\n                        <span key={_.uniqueId()}>{element.gender}</span>\n                    </div>\n                    <div key={_.uniqueId()} className=\"organization\">\n                        <span key={_.uniqueId()}>{element.organization}</span>\n                    </div>\n                </div>\n            )\n            retrunArr.push(e)\n        });\n        return retrunArr\n    }\n\n\n    return (\n        <div className=\"landingPageMainDiv\">\n            <div className=\"titleDiv\">\n                {/* <span onClick={() => getPage()}>Enter your name to login</span>\n                <span onClick={() => selectUser(\"AI3504\")}>CLICK ME!</span> */}\n                {/* <span onClick={()=> selectUser(\"AI6711\")}>CLICK ME!</span> */}\n                <span>Add user to relay pool</span>\n                <div className=\"titleLine\" />\n            </div>\n            <div className=\"inputMainDiv\">\n                <form className=\"inputContainer\" onSubmit={inputHandler}>\n                    <div className=\"inputDefault nameContainer\">\n                        <span>Name</span>\n                        <input type=\"text\" name=\"name\" id=\"name\" />\n                    </div>\n                    <div className=\"inputDefault surNameContainer\">\n                        <span>Surname</span>\n                        <input type=\"text\" name=\"surName\" id=\"surName\" />\n                    </div>\n                    <div className=\"inputDefault OrganizationContainer\">\n                        <span>Organization</span>\n                        <input type=\"text\" name=\"organization\" id=\"organization\" />\n                    </div>\n                    <div className=\"inputButton\">\n                        <button type=\"submit\">Go!</button>\n                    </div>\n                </form>\n            </div>\n            <div className=\"userListMainDiv\">\n                {store.getState() ?\n                    displayList() :\n                    null\n                }\n                <div className=\"extraSpace\" />\n            </div>\n        </div>\n    )\n}\n\nconst useRelay = ()=>{\n\n    // get course, distance\n\n    // get info from swimmer\n\n        // create page to login multiple swimmers\n        // send loged in swimmers to a favorites list and save to cookies\n\n    // calc every outcome from pool of swimmers\n    \n    // choose the amount of teams generated\n\n    // generate and display teams\n\n    // profit\n\n    const [page, setPage] = useState(\"main\")\n    const [pool, setPool] = useState(\"25\")\n    const [distance, setDistance] = useState(25)\n    const [stroke, setStroke] = useState(\"fr\")\n    const [calcTeamBtn, setCalcTeamBtn] = useState(false)\n    const [team_list, setTeam_list] = useState(null)\n\n    const remove_user_from_pool= (index)=>{\n        \n        let data = store.getState().relay?.data\n        let info = store.getState().relay?.info\n\n        data.splice(index, 1)\n        info.splice(index, 1)\n\n        store.dispatch({ //adding user gender\n            type: \"RELAY_REMOVE_USER\",\n            payload: {\n                data: data,\n                info: info\n            }\n        })\n        // update session storage\n        localStorage.setItem(\"relay\", JSON.stringify(store.getState().relay))\n    }\n\n    const displayList = () => {\n        let retrunArr = []\n        if (store.getState()?.relay?.info === undefined) return\n        store.getState().relay.info.forEach((element, index) => {\n            const e = (\n                <div key={_.uniqueId()} className=\"listEDefault\">\n                    <div className=\"info_pool\">\n                        <div key={_.uniqueId()} className=\"nameDiv\">\n                            <span key={_.uniqueId()}>{element.name + \" \" + element.sur_name}</span>\n                        </div>\n                        <div key={_.uniqueId()} className=\"ageDiv\">\n                            <span key={_.uniqueId()}>{element.age}</span>\n                        </div>\n                        <div key={_.uniqueId()} className=\"organization\">\n                            <span key={_.uniqueId()}>{element.organization}</span>\n                        </div>\n                    </div>\n                    <button key={index} onClick={()=>{remove_user_from_pool(index)}}>Remove</button>\n                </div>\n            )\n            retrunArr.push(e)\n        });\n        return retrunArr\n    }\n\n    const calc_teams = ()=>{\n        setCalcTeamBtn(true)\n\n        console.log(\"pool: \", pool)\n        console.log(\"distance: \", distance)\n        console.log(\"stroke: \", stroke)\n\n\n        if (store.getState()?.relay?.info === undefined) return \n\n        if (store.getState()?.relay?.data?.length < 4){\n            console.log(\"Not enough swimmers for a team\")\n            return\n        }\n\n        let time_arr = []\n        let tot_time = moment.duration()\n\n        store.getState().relay.data.forEach((elm, index) =>{\n            if (elm[pool]?.[stroke]?.[distance]?.time === undefined){\n                console.log(\"NOT ALL SWIMMERS HAVE SWAM THIS DISTANCE\")\n                tot_time = \"NO TIME\"\n                time_arr.push([\n                    index,\n                    0,\n                    \"NO TIME\",\n                ])\n                return\n            }\n            const info = store.getState().relay.info[index]\n            console.log(\"Name: \", info.name)\n            console.log(\"Time: \", elm[pool][stroke][distance].time)\n\n            let time = elm[pool][stroke][distance].time\n\n            if (moment.isDuration(tot_time)){\n                tot_time.\n                    add(parseInt(time.split(\":\").splice(0)), \"m\").\n                    add(parseInt(time.split(\":\").splice(1)), \"s\").\n                    add(parseInt(time.split(\".\").splice(1)), \"ms\")\n            }\n\n            time_arr.push([\n                index,\n                moment(time, \"mm:ss.SS\").valueOf(),\n                time,\n            ])\n        })\n\n\n        function sortFunction(a, b) {\n            if (a[1] === b[1]) {\n                return 0;\n            }\n            else {\n                return (a[1] < b[1]) ? -1 : 1;\n            }\n        }\n\n        time_arr.sort(sortFunction)\n\n        let returnArr = []\n\n        time_arr.forEach((elm)=>{\n            let index = elm[0]\n            let element = store.getState().relay.info[index]\n            const e = (\n                <div key={_.uniqueId()} className=\"listEDefault\">\n                    <div className=\"info_pool\">\n                        <div key={_.uniqueId()} className=\"nameDiv\">\n                            <span key={_.uniqueId()}>{element.name + \" \" + element.sur_name}</span>\n                        </div>\n                        <div key={_.uniqueId()} className=\"ageDiv\">\n                            <span key={_.uniqueId()}>{elm[2]}</span>\n                        </div>\n                    </div>\n                    <div className=\"stroke_header\">\n                        <span>{stroke.toUpperCase()}</span>\n                    </div>\n                </div>\n            )\n            returnArr.push(e)\n\n        })\n\n        let time_str = tot_time\n        if (moment.isDuration(tot_time)){\n            time_str = `${tot_time.get(\"m\")}:${tot_time.get(\"s\")}.${tot_time.get(\"ms\").toString().slice(0, -1)}`\n            if (parseInt(tot_time.get(\"s\")) < 10){\n                time_str = `${tot_time.get(\"m\")}:0${tot_time.get(\"s\")}.${tot_time.get(\"ms\").toString().slice(0, -1)}`\n            }\n        }\n\n\n        console.log(time_str)\n\n        returnArr.push(\n            <>\n            <div className=\"team_info\">\n                <div className=\"result_menu\">\n                    <span className=\"header\">Total time</span>\n                    <span className=\"time\">{time_str}</span>\n                </div>\n                <div className=\"reset_teams\">\n                    <button onClick={()=>{setCalcTeamBtn(false)}}>Reset Teams</button>\n                </div>\n            </div>\n            </>\n        )\n\n        setTeam_list(returnArr)\n\n    }\n\n    const main_page = ()=>{\n        return (\n            <div className=\"relayMainBody\">\n                <div className=\"info\">\n                    <div className=\"course select_default\">\n                        <span>COURSE:</span>\n                        <select onChange={(e) => setPool(e.target.value)} name=\"course\" id=\"course\">\n                            <option value=\"25\">25</option>\n                            <option value=\"50\">50</option>\n                        </select>\n                    </div>\n                    <div className=\"distance select_default\">\n                        <span>DISTANCE</span>\n                        <select onChange={(e) => setDistance(e.target.value)} name=\"distance\" id=\"distance\">\n                            <option value=\"25\">25</option>\n                            <option value=\"50\">50</option>\n                            <option value=\"100\">100</option>\n                            <option value=\"200\">200</option>\n                        </select>\n                    </div>\n                    <div className=\"stroke select_default\">\n                        <span>STROKE</span>\n                        <select onChange={(e) => setStroke(e.target.value)} name=\"stroke\" id=\"stroke\">\n                            <option value=\"fr\">FREE</option>\n                            <option value=\"br\">BREST</option>\n                            <option value=\"ry\">BACK</option>\n                            <option value=\"fj\">FLY</option>\n                        </select>\n                    </div>\n                </div>\n                <div className=\"swimmer_pool\">\n                    <div className=\"pool_info\">\n                        <span>Swimmer pool</span>\n                        <button onClick={()=>{setPage(\"user_login\")}}>Add +</button>\n                    </div>\n                    {\n                        store.getState()?.relay?.info?.[0] ? \n                        <div className=\"swimmer_pool_list\">\n                            {store.getState() ?\n                                displayList() :\n                                null\n                            }\n                        </div>\n                        :\n                        null\n                    }\n                </div>\n                {\n                    store.getState()?.relay?.info?.[0] ? \n                    <div className=\"result_div\">\n                        <div className=\"menu\">\n                            {\n                                calcTeamBtn ? \n                                <>\n                                    <span>TEAMS</span>\n                                    <div className=\"line_seperator\"/>\n                                </>\n                                :\n                                <button onClick={()=>{calc_teams()}}>Go!</button>\n                            }\n                        </div>\n                        <div className=\"teams\">\n                            {\n                                calcTeamBtn ? \n                                <div className=\"teams_list\">\n                                        {team_list}\n                                </div>\n                                :\n                                null\n                            }\n                        </div>\n                    </div>\n                    :\n                    null\n                }\n            </div>\n        )\n    }\n    const show_page = ()=>{\n        switch(page){\n            case \"main\":\n                return main_page()\n            case \"user_login\":\n                return <User_login setPage={setPage} store={store}/>\n        }\n    }\n\n\n    return show_page()\n\n} \n\nexport default useRelay",{"ruleId":"47","severity":1,"message":"48","line":51,"column":8,"nodeType":"49","endLine":51,"endColumn":16,"suggestions":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":1,"column":10,"nodeType":"57","messageId":"58","endLine":1,"endColumn":17},{"ruleId":"47","severity":1,"message":"59","line":17,"column":8,"nodeType":"49","endLine":17,"endColumn":26,"suggestions":"60"},{"ruleId":"47","severity":1,"message":"61","line":17,"column":9,"nodeType":"62","endLine":17,"endColumn":25},{"ruleId":"47","severity":1,"message":"63","line":16,"column":15,"nodeType":"64","endLine":35,"endColumn":6},{"ruleId":"65","severity":1,"message":"66","line":64,"column":18,"nodeType":"67","messageId":"68","endLine":64,"endColumn":20},{"ruleId":"65","severity":1,"message":"66","line":67,"column":24,"nodeType":"67","messageId":"68","endLine":67,"endColumn":26},{"ruleId":"65","severity":1,"message":"66","line":70,"column":24,"nodeType":"67","messageId":"68","endLine":70,"endColumn":26},{"ruleId":"65","severity":1,"message":"66","line":73,"column":24,"nodeType":"67","messageId":"68","endLine":73,"endColumn":26},{"ruleId":"65","severity":1,"message":"66","line":76,"column":24,"nodeType":"67","messageId":"68","endLine":76,"endColumn":26},{"ruleId":"47","severity":1,"message":"69","line":185,"column":8,"nodeType":"49","endLine":185,"endColumn":29,"suggestions":"70"},{"ruleId":"55","severity":1,"message":"71","line":4,"column":10,"nodeType":"57","messageId":"58","endLine":4,"endColumn":19},{"ruleId":"72","severity":1,"message":"73","line":238,"column":25,"nodeType":"74","messageId":"75","endLine":238,"endColumn":26,"fix":"76"},{"ruleId":"72","severity":1,"message":"73","line":239,"column":66,"nodeType":"74","messageId":"75","endLine":239,"endColumn":67,"fix":"77"},{"ruleId":"72","severity":1,"message":"73","line":240,"column":66,"nodeType":"74","messageId":"75","endLine":240,"endColumn":67,"fix":"78"},{"ruleId":"79","severity":1,"message":"80","line":395,"column":9,"nodeType":"81","messageId":"82","endLine":400,"endColumn":10},{"ruleId":"83","severity":1,"message":"84","line":399,"column":24,"nodeType":"85","messageId":"86","endLine":399,"endColumn":69},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'unsubscribe'. Either include it or remove the dependency array.","ArrayExpression",["87"],"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'forEach' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'cancelCheck'. Either include it or remove the dependency array.",["90"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'pool'. Either include it or remove the dependency array.",["91"],"'useEffect' is defined but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"92","text":"93"},{"range":"94","text":"93"},{"range":"95","text":"93"},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/jsx-pascal-case","Imported JSX component User_login must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase",{"desc":"96","fix":"97"},"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},[8263,8285],"\n                    .",[8330,8352],[8397,8419],"Update the dependencies array to be: [unsubscribe, update]",{"range":"102","text":"103"},"Update the dependencies array to be: [cancelCheck]",{"range":"104","text":"105"},"Update the dependencies array to be: [pool, selectedCompetition]",{"range":"106","text":"107"},[1773,1781],"[unsubscribe, update]",[519,537],"[cancelCheck]",[7924,7945],"[pool, selectedCompetition]"]