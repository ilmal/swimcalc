[{"/home/nils/programing/swimcalc/src/index.jsx":"1","/home/nils/programing/swimcalc/src/redux/reducers.jsx":"2","/home/nils/programing/swimcalc/src/calculator/calc.jsx":"3","/home/nils/programing/swimcalc/src/landing/landing.jsx":"4","/home/nils/programing/swimcalc/src/kvaltider/kvaltider.jsx":"5","/home/nils/programing/swimcalc/src/relay/relay.jsx":"6"},{"size":6629,"mtime":1668875030024,"results":"7","hashOfConfig":"8"},{"size":2401,"mtime":1668874902232,"results":"9","hashOfConfig":"8"},{"size":5982,"mtime":1668871380339,"results":"10","hashOfConfig":"8"},{"size":6088,"mtime":1668875348633,"results":"11","hashOfConfig":"8"},{"size":6137,"mtime":1668872514805,"results":"12","hashOfConfig":"8"},{"size":14404,"mtime":1669197205363,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"1els3qr",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"17"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"17"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},"/home/nils/programing/swimcalc/src/index.jsx",["30"],"import ReactDOM from \"react-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./scss/main.scss\";\nimport { applyMiddleware, createStore } from \"redux\"\nimport { Provider } from \"react-redux\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport thunk from \"redux-thunk\"\nimport reducer from \"./redux/reducers\"\n\nimport useCalc from \"./calculator/calc\"\nimport useKvaltider from \"./kvaltider/kvaltider\";\nimport useLandingPage from \"./landing/landing\";\nimport useRelay from \"./relay/relay\"\n\nexport const store = createStore(\n    reducer,\n    composeWithDevTools(applyMiddleware(thunk)) //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\n\nconst LandingPage = () => {\n    \n    const [update, setUpdate] = useState(false)\n    const unsubscribe = store.subscribe(()=>setUpdate(!update))\n\n    useEffect(()=>{\n        if (store.getState()?.user?.info !== undefined) {\n            let status = store.getState().user.info.status\n            if (status.indexOf(\",\") > -1) status = status.split(\",\")[0]\n\n            let active = true\n            if (status.indexOf(\"Ej\")) active = false\n\n\n            setMainTitle(\n                <div>\n                    <span>{store.getState().user.info.name + \" \" + store.getState().user.info.sur_name}</span>\n                    <div>\n                        <span>STATUS</span>\n                        <span style={active ? { color: \"#DC143C\" } : { color: \"#00FF00\" }}>{status}</span>\n                    </div>\n                </div>\n            )\n        } else {\n            setMainTitle(<span>SwimCalc.se</span>)\n        }\n\n        if (store.getState().loading) set_is_page_loading(true)\n        if (!store.getState().loading) set_is_page_loading(false)\n        unsubscribe()\n    }, [update])\n\n    const [pageSelector, setPageSelector] = useState(\"landing\")\n    const [is_page_loading, set_is_page_loading] = useState(false)\n    const landingPage = useLandingPage()\n    const calcComponent = useCalc()\n    const kvaltiderComponent = useKvaltider()\n    const relayComponent = useRelay()\n\n    const [mainTitle, setMainTitle] = useState(<span>SwimCalc.se</span>)\n\n    useEffect(() => { // for localStorage cookies\n        console.log(\"1\")\n        if (localStorage.getItem(\"user\") !== \"null\" || localStorage.getItem(\"user\") !== undefined) {\n            store.dispatch({\n                type: \"USER\",\n                payload: JSON.parse(localStorage.getItem(\"user\"))\n            })\n        }\n        if (localStorage.getItem(\"relay\") !== \"null\" || localStorage.getItem(\"relay\") !== undefined) {\n            if (JSON.parse(localStorage.getItem(\"relay\"))?.data === undefined || JSON.parse(localStorage.getItem(\"relay\"))?.info === undefined) return\n            store.dispatch({\n                type: \"RELAY\",\n                payload: JSON.parse(localStorage.getItem(\"relay\"))\n            })\n        }\n\n    }, [])\n\n    const showPage = () => {\n        switch (pageSelector) {\n            case \"landing\":\n                return landingPage\n            case \"calc\":\n                return calcComponent\n            case \"kval\":\n                return kvaltiderComponent\n            case \"relay\":\n                return relayComponent\n            default:\n                break;\n        }\n    }\n\n    const loading_handler = (state)=>{\n\n        const random_loader = ()=>{\n            const loaders = [\n                \"dot-elastic\",\n                \"dot-pulse\",\n                \"dot-flashing\",\n                \"dot-collision\",\n                \"dot-revolution\",\n                \"dot-carousel\",\n                \"dot-typing\",\n                \"dot-windmill\",\n                \"dot-bricks\",\n                \"dot-floating\",\n                \"dot-fire\",\n                \"dot-spin\",\n                \"dot-falling\",\n                \"dot-stretching\"\n            ]\n            return loaders[Math.floor(Math.random() * loaders.length)];\n        }\n\n        function disableScroll() {\n            // Get the current page scroll position\n            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n            const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n          \n            // if any scroll is attempted, set this to the previous value\n            window.onscroll = function() {\n                window.scrollTo(scrollLeft, scrollTop);\n            };\n        }\n          \n        function enableScroll() {\n            window.onscroll = function() {};\n        }\n\n        if (state){\n            //document.getElementById(\"root\").classList.add(\"stop_scroll\")\n\n            disableScroll()\n\n            return(\n                <div className=\"loading_container\" style={{top:`${window.pageYOffset}px`}}>\n                    <div class={random_loader()}/>\n                </div>\n            )\n        }\n        //document.getElementById(\"root\").classList.remove(\"stop_scroll\")\n        enableScroll()\n        return null\n    }\n\n    return (\n        <>\n            {\n                loading_handler(is_page_loading)\n            }\n            {\n                console.log(\"Loading\")\n            }\n            <div className=\"mainBody\">\n                <div className=\"headerMenuContainer\">\n                    <div className=\"headerMenuInnerContainer\">\n                        <div onClick={() => setPageSelector(\"landing\")}>\n                            <span>LOGIN</span>\n                        </div>\n                        <div onClick={() => setPageSelector(\"calc\")}>\n                            <span>CALC</span>\n                        </div>\n                        <div onClick={() => setPageSelector(\"kval\")}>\n                            <span>KVALTIDER</span>\n                        </div>\n                        <div onClick={()=> setPageSelector(\"relay\")}>\n                            <span>RELAY</span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"titleContainer\">\n                    {mainTitle}\n                </div>\n                <svg className=\"waves\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\n                    <path fill=\"#fff\" d=\"M0,96L80,101.3C160,107,320,117,480,149.3C640,181,800,235,960,229.3C1120,224,1280,160,1360,128L1440,96L1440,320L1360,320C1280,320,1120,320,960,320C800,320,640,320,480,320C320,320,160,320,80,320L0,320Z\"></path>\n                </svg>\n                {\n                    showPage()\n                }\n            </div >\n        </>\n    )\n}\n\n\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <LandingPage />\n    </Provider>\n    , document.querySelector(\"#root\")\n)",["31","32"],"/home/nils/programing/swimcalc/src/redux/reducers.jsx",[],"/home/nils/programing/swimcalc/src/calculator/calc.jsx",[],"/home/nils/programing/swimcalc/src/landing/landing.jsx",["33","34"],"import axios from \"axios\"\nimport { useEffect, useState } from \"react\"\nimport { store } from \"../index\"\nimport _ from \"lodash\"\n\nconst useLandingPage = () => {\n\n    const [isLoggedInPage, setIsLoggedInPage] = useState(false)\n    const [cancelCheck, setCancelCheck] = useState(false)\n\n    useEffect(() => {\n        if (store.getState()?.user?.data !== undefined && !cancelCheck) {\n            if (Object.keys(store.getState().user.data).length > 0){\n                setIsLoggedInPage(true)\n            } \n        }\n    }, [store.getState()])\n\n    const getPage = async (name, sur_name) => {\n        console.log(\"getPage\")\n        store.dispatch({\n            type: \"LOADING\",\n            payload: true\n        })\n        await axios.post(\"/tempus/find\", {\n            name,\n            sur_name\n        })\n            .then(res => {\n                store.dispatch({\n                    type: \"USER_SEARCH_FIELDS\",\n                    payload: res.data\n                })\n            })\n        console.log(\"done\")\n        store.dispatch({\n            type: \"LOADING\",\n            payload: false\n        })\n    }\n\n    const selectUser = async (index) => {\n        setIsLoggedInPage(true)\n        setCancelCheck(false)\n\n        store.dispatch({\n            type: \"LOADING\",\n            payload: true\n        })\n\n        await store.dispatch({ //adding user gender\n            type: \"USER_INFO\",\n            payload: {\n                gender: store.getState().user.searchField[index].gender,\n                name: store.getState().user.searchField[index].name,\n                sur_name: store.getState().user.searchField[index].sur_name,\n                age: store.getState().user.searchField[index].age,\n                status: store.getState().user.searchField[index].status\n            }\n        })\n\n        await axios.post(\"/tempus/selectUser\", {\n            id: store.getState().user.searchField[index].id\n        })\n            .then(res => {\n                store.dispatch({\n                    type: \"LOADING\",\n                    payload: false\n                })\n                console.log(\"CHANGING USER DATA\")\n                console.log(res.data)\n                store.dispatch({\n                    type: \"USER_DATA\",\n                    payload: res.data\n                })\n            })\n\n        // add to session storage\n        localStorage.setItem(\"user\", JSON.stringify(store.getState().user))\n    }\n\n    const inputHandler = (e) => {\n        e.preventDefault()\n        if (e.target.name.value === \"\") {\n            getPage(\"nils\", \"malmberg\")\n            return\n        }\n        getPage(e.target.name.value, e.target.surName.value)\n    }\n\n    const displayList = () => {\n        let retrunArr = []\n        if (store.getState()?.user?.searchField === undefined) return\n        store.getState().user.searchField.forEach((element, index) => {\n            const e = (\n                <div key={_.uniqueId()} className=\"listEDefault\" onClick={() => selectUser(index)} style={{ gridRow: `${index + 1}/${index + 2}` }}>\n                    <div key={_.uniqueId()} className=\"nameDiv\">\n                        <span key={_.uniqueId()}>{element.name + \" \" + element.sur_name}</span>\n                    </div>\n                    <div key={_.uniqueId()} className=\"ageDiv\">\n                        <span key={_.uniqueId()}>{element.age}</span>\n                    </div>\n                    <div key={_.uniqueId()} className=\"genderDiv\">\n                        <span key={_.uniqueId()}>{element.gender}</span>\n                    </div>\n                    <div key={_.uniqueId()} className=\"organization\">\n                        <span key={_.uniqueId()}>{element.organization}</span>\n                    </div>\n                </div>\n            )\n            retrunArr.push(e)\n        });\n        return retrunArr\n    }\n\n    const changeUserFunc = async () => {\n        localStorage.setItem(\"user\", null)\n        setIsLoggedInPage(false)\n        setCancelCheck(true)\n        await store.dispatch({\n            type: \"CLR_USER\",\n            payload: []\n        })\n    }\n\n    if (isLoggedInPage) {\n        return (\n            <div className=\"isLoggedInMainDiv\">\n                <span>Logged in as: {store.getState().user.info.name + \" \" + store.getState().user.info.sur_name}</span>\n                <button onClick={changeUserFunc}>CHANGE USER</button>\n            </div>\n        )\n    }\n    return (\n        <div className=\"landingPageMainDiv\">\n            <div className=\"titleDiv\">\n                {/* <span onClick={() => getPage()}>Enter your name to login</span>\n                <span onClick={() => selectUser(\"AI3504\")}>CLICK ME!</span> */}\n                {/* <span onClick={()=> selectUser(\"AI6711\")}>CLICK ME!</span> */}\n                <span>LINK WITH TEMPUS OPEN</span>\n                <div className=\"titleLine\" />\n            </div>\n            <div className=\"inputMainDiv\">\n                <form className=\"inputContainer\" onSubmit={inputHandler}>\n                    <div className=\"inputDefault nameContainer\">\n                        <span>Name</span>\n                        <input type=\"text\" name=\"name\" id=\"name\" />\n                    </div>\n                    <div className=\"inputDefault surNameContainer\">\n                        <span>Surname</span>\n                        <input type=\"text\" name=\"surName\" id=\"surName\" />\n                    </div>\n                    <div className=\"inputDefault OrganizationContainer\">\n                        <span>Organization</span>\n                        <input type=\"text\" name=\"organization\" id=\"organization\" />\n                    </div>\n                    <div className=\"inputButton\">\n                        <button type=\"submit\">Go!</button>\n                    </div>\n                </form>\n            </div>\n            <div className=\"userListMainDiv\">\n                {store.getState() ?\n                    displayList() :\n                    null\n                }\n                <div className=\"extraSpace\" />\n            </div>\n        </div>\n    )\n\n}\n\nexport default useLandingPage","/home/nils/programing/swimcalc/src/kvaltider/kvaltider.jsx",["35","36"],"import { store } from \"..\"\nimport axios from \"axios\"\nimport { useState } from \"react\"\nimport { useEffect } from \"react\"\nimport _ from \"lodash\"\n\n\nconst useKvaltider = () => {\n\n    const [competitionList, setCompetitionList] = useState()\n    const [list, setlist] = useState(null)\n\n    const [pool, setPool] = useState(\"25\")\n\n    useEffect(async () => {\n        await axios.post(\"/competitions\")\n            .then((res) => {\n                store.dispatch({\n                    type: \"COMPETITIONS\",\n                    payload: res.data\n                })\n            })\n\n\n        let returnList = []\n        Object.keys(store.getState().competitions).forEach(key => {\n            const option = (\n                <option value={key}>{key}</option>\n            )\n            returnList.push(option)\n        });\n        setCompetitionList(returnList)\n    }, [])\n\n    const checkAge = (age) => {\n\n        const date = new Date()\n        const userAge = parseInt(date.getFullYear()) - parseInt(store.getState().user.info.age)\n\n        if (userAge <= age) {\n            return true\n        }\n        return false\n    }\n\n    const checkQ = (qtime, ytime) => {\n        if (qtime > ytime) return true\n        return false\n    }\n\n    useEffect(() => {\n        //console.log(\"store.getState()?.user?.data: \", store.getState()?.user?.data)\n        if (store.getState()?.competitions?.sumsim !== undefined && store.getState()?.user?.data !== undefined && store.getState()?.user?.info?.gender !== undefined) {\n            let returnArr = []\n            let ageGroupFound = false\n            let duplicateCheck = []\n            Object.keys(store.getState().competitions.sumsim[store.getState().user.info.gender.toLowerCase()][pool]).forEach(age => { // to age\n                if (!checkAge(age)) {\n                    return\n                }\n                Object.keys(store.getState().competitions.sumsim[store.getState().user.info.gender.toLowerCase()][pool][age]).forEach(style => { // to style\n                    ageGroupFound = true\n                    Object.keys(store.getState().competitions.sumsim[store.getState().user.info.gender.toLowerCase()][pool][age][style]).forEach(distance => { // to distance\n                        //console.log(\"Time: \", store.getState().competitions.sumsim[store.getState().user.info.gender.toLowerCase()][pool][age][style][distance], \"Style: \", style, \"Distance: \", distance)\n                        //console.log(\"USERDATA: \", store.getState().user.data?.[pool]?.[style]?.[distance]?.time)\n\n                        let isDuplicate = false\n                        duplicateCheck.forEach(element => {\n                            if (element === distance + style) isDuplicate = true\n                        })\n                        duplicateCheck.push(distance + style)\n                        if (isDuplicate) return\n\n                        if (store.getState().user.data?.[pool]?.[style]?.[distance]?.time !== undefined) { // making sure the swimmer has a valid time \n                            let addClass = \"not_qualified\"\n                            let Qmessage = \"NOT QUALIFIED\"\n                            if (checkQ(store.getState().competitions.sumsim[store.getState().user.info.gender.toLowerCase()][pool][age][style][distance], store.getState().user.data[pool][style][distance].time)) {\n                                addClass = \"qualified\"\n                                Qmessage = \"QUALIFIED\"\n                            }\n\n                            const div = (\n                                <div key={_.uniqueId()} className={\"listDiv \" + addClass}>\n                                    <div key={_.uniqueId()} className=\"distanceDiv\">\n                                        <span key={_.uniqueId()}>{distance}</span>\n                                        <span key={_.uniqueId()}>{style.toUpperCase()}</span>\n                                    </div>\n                                    <div key={_.uniqueId()} className=\"Qmessage\">\n                                        <span key={_.uniqueId()} >{Qmessage}</span>\n                                    </div>\n                                    <div key={_.uniqueId()} className=\"QtimeDiv\">\n                                        <span key={_.uniqueId()}>Q-Time</span>\n                                        <span key={_.uniqueId()}>{store.getState().competitions.sumsim[store.getState().user.info.gender.toLowerCase()][pool][age][style][distance]}</span>\n                                    </div>\n                                    <div key={_.uniqueId()} className=\"YtimeDiv\">\n                                        <span key={_.uniqueId()}>Your-Time</span>\n                                        <span key={_.uniqueId()}>{store.getState().user.data[pool][style][distance].time}</span>\n                                    </div>\n                                </div>\n                            )\n                            returnArr.push(div)\n                        }\n                    })\n                })\n            })\n            if (!ageGroupFound) {\n                console.log(\"NO AGE FOUND\")\n                return setlist(\n                    <div className=\"toOldDiv\">\n                        <span>TO OLD</span>\n                    </div>\n                )\n            }\n            setlist(returnArr)\n        } else {\n            setlist(null)\n        }\n    }, [])\n\n\n    return (\n        <div className=\"kvaltiderMainDiv\">\n            <div className=\"selectCompetition\">\n                <span>COMPETITION</span>\n                <select name=\"competition\" id=\"competition\">\n                    {competitionList}\n                </select>\n            </div>\n            <div className=\"selectPool\">\n                <span>POOL</span>\n                <select onChange={(e) => setPool(e.target.value)} name=\"pool\" id=\"pool\">\n                    <option value=\"25\">25</option>\n                    <option value=\"50\">50</option>\n                </select>\n            </div>\n            <div className=\"kvalList\">\n                {list}\n            </div>\n        </div>\n    )\n}\n\nexport default useKvaltider","/home/nils/programing/swimcalc/src/relay/relay.jsx",["37","38","39","40","41","42"],{"ruleId":"43","severity":1,"message":"44","line":51,"column":8,"nodeType":"45","endLine":51,"endColumn":16,"suggestions":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"43","severity":1,"message":"51","line":17,"column":8,"nodeType":"45","endLine":17,"endColumn":26,"suggestions":"52"},{"ruleId":"43","severity":1,"message":"53","line":17,"column":9,"nodeType":"54","endLine":17,"endColumn":25},{"ruleId":"43","severity":1,"message":"55","line":15,"column":15,"nodeType":"56","endLine":33,"endColumn":6},{"ruleId":"43","severity":1,"message":"57","line":118,"column":8,"nodeType":"45","endLine":118,"endColumn":10,"suggestions":"58"},{"ruleId":"59","severity":1,"message":"60","line":4,"column":10,"nodeType":"61","messageId":"62","endLine":4,"endColumn":19},{"ruleId":"63","severity":1,"message":"64","line":238,"column":25,"nodeType":"65","messageId":"66","endLine":238,"endColumn":26,"fix":"67"},{"ruleId":"63","severity":1,"message":"64","line":239,"column":66,"nodeType":"65","messageId":"66","endLine":239,"endColumn":67,"fix":"68"},{"ruleId":"63","severity":1,"message":"64","line":240,"column":66,"nodeType":"65","messageId":"66","endLine":240,"endColumn":67,"fix":"69"},{"ruleId":"70","severity":1,"message":"71","line":395,"column":9,"nodeType":"72","messageId":"73","endLine":400,"endColumn":10},{"ruleId":"74","severity":1,"message":"75","line":399,"column":24,"nodeType":"76","messageId":"77","endLine":399,"endColumn":69},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'unsubscribe'. Either include it or remove the dependency array.","ArrayExpression",["78"],"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"React Hook useEffect has a missing dependency: 'cancelCheck'. Either include it or remove the dependency array.",["81"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'pool'. Either include it or remove the dependency array.",["82"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"83","text":"84"},{"range":"85","text":"84"},{"range":"86","text":"84"},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/jsx-pascal-case","Imported JSX component User_login must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase",{"desc":"87","fix":"88"},"no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},[8263,8285],"\n                    .",[8330,8352],[8397,8419],"Update the dependencies array to be: [unsubscribe, update]",{"range":"93","text":"94"},"Update the dependencies array to be: [cancelCheck]",{"range":"95","text":"96"},"Update the dependencies array to be: [pool]",{"range":"97","text":"98"},[1773,1781],"[unsubscribe, update]",[519,537],"[cancelCheck]",[5399,5401],"[pool]"]