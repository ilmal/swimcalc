[{"/home/nils/programing/swimcalc/src/index.jsx":"1","/home/nils/programing/swimcalc/src/redux/reducers.jsx":"2","/home/nils/programing/swimcalc/src/calculator/calc.jsx":"3","/home/nils/programing/swimcalc/src/landing/landing.jsx":"4","/home/nils/programing/swimcalc/src/kvaltider/kvaltider.jsx":"5","/home/nils/programing/swimcalc/src/relay/relay.jsx":"6"},{"size":6737,"mtime":1674042360893,"results":"7","hashOfConfig":"8"},{"size":2401,"mtime":1668874902232,"results":"9","hashOfConfig":"8"},{"size":5982,"mtime":1668871380339,"results":"10","hashOfConfig":"8"},{"size":6088,"mtime":1668875348633,"results":"11","hashOfConfig":"8"},{"size":8439,"mtime":1674206642544,"results":"12","hashOfConfig":"8"},{"size":14404,"mtime":1669197205363,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"1els3qr",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"17"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":3,"source":"30","usedDeprecatedRules":"17"},"/home/nils/programing/swimcalc/src/index.jsx",["31"],"import ReactDOM from \"react-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./scss/main.scss\";\nimport { applyMiddleware, createStore } from \"redux\"\nimport { Provider } from \"react-redux\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport thunk from \"redux-thunk\"\nimport reducer from \"./redux/reducers\"\n\nimport useCalc from \"./calculator/calc\"\nimport useKvaltider from \"./kvaltider/kvaltider\";\nimport useLandingPage from \"./landing/landing\";\nimport useRelay from \"./relay/relay\"\n\nexport const store = createStore(\n    reducer,\n    composeWithDevTools(applyMiddleware(thunk)) //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\n\nconst LandingPage = () => {\n    \n    const [update, setUpdate] = useState(false)\n    const unsubscribe = store.subscribe(()=>setUpdate(!update))\n\n    useEffect(()=>{\n        if (store.getState()?.user?.info !== undefined) {\n            let status = store.getState().user.info.status\n            if (status.indexOf(\",\") > -1) status = status.split(\",\")[0]\n\n            let active = true\n            if (status.indexOf(\"Ej\")) active = false\n\n\n            setMainTitle(\n                <div>\n                    <span>{store.getState().user.info.name + \" \" + store.getState().user.info.sur_name}</span>\n                    <div>\n                        <span>STATUS</span>\n                        <span style={active ? { color: \"#DC143C\" } : { color: \"#00FF00\" }}>{status}</span>\n                    </div>\n                </div>\n            )\n        } else {\n            setMainTitle(<span>SwimCalc.se</span>)\n        }\n\n        if (store.getState().loading) set_is_page_loading(true)\n        if (!store.getState().loading) set_is_page_loading(false)\n        unsubscribe()\n    }, [update])\n\n    const [pageSelector, setPageSelector] = useState(\"kval\")\n    const [is_page_loading, set_is_page_loading] = useState(false)\n    const landingPage = useLandingPage()\n    const calcComponent = useCalc()\n    const kvaltiderComponent = useKvaltider()\n    const relayComponent = useRelay()\n\n    const [mainTitle, setMainTitle] = useState(<span>SwimCalc.se</span>)\n\n    useEffect(() => { // for localStorage cookies\n        console.log(\"1\")\n        if (localStorage.getItem(\"user\") !== \"null\" || localStorage.getItem(\"user\") !== undefined) {\n            store.dispatch({\n                type: \"USER\",\n                payload: JSON.parse(localStorage.getItem(\"user\"))\n            })\n        }\n        if (localStorage.getItem(\"relay\") !== \"null\" || localStorage.getItem(\"relay\") !== undefined) {\n            if (JSON.parse(localStorage.getItem(\"relay\"))?.data === undefined || JSON.parse(localStorage.getItem(\"relay\"))?.info === undefined) return\n            store.dispatch({\n                type: \"RELAY\",\n                payload: JSON.parse(localStorage.getItem(\"relay\"))\n            })\n        }\n\n    }, [])\n\n    const showPage = () => {\n        switch (pageSelector) {\n            case \"landing\":\n                return landingPage\n            case \"calc\":\n                return calcComponent\n            case \"kval\":\n                return kvaltiderComponent\n            case \"relay\":\n                return relayComponent\n            default:\n                break;\n        }\n    }\n\n    const loading_handler = (state)=>{\n\n        const random_loader = ()=>{\n            const loaders = [\n                \"dot-elastic\",\n                \"dot-pulse\",\n                \"dot-flashing\",\n                \"dot-collision\",\n                \"dot-revolution\",\n                \"dot-carousel\",\n                \"dot-typing\",\n                \"dot-windmill\",\n                \"dot-bricks\",\n                \"dot-floating\",\n                \"dot-fire\",\n                \"dot-spin\",\n                \"dot-falling\",\n                \"dot-stretching\"\n            ]\n            return loaders[Math.floor(Math.random() * loaders.length)];\n        }\n\n        function disableScroll() {\n            // Get the current page scroll position\n            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n            const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n          \n            // if any scroll is attempted, set this to the previous value\n            window.onscroll = function() {\n                window.scrollTo(scrollLeft, scrollTop);\n            };\n        }\n          \n        function enableScroll() {\n            window.onscroll = function() {};\n        }\n\n        if (state){\n            //document.getElementById(\"root\").classList.add(\"stop_scroll\")\n\n            disableScroll()\n\n            return(\n                <div className=\"loading_container\" style={{top:`${window.pageYOffset}px`}}>\n                    <div class={random_loader()}/>\n                </div>\n            )\n        }\n        //document.getElementById(\"root\").classList.remove(\"stop_scroll\")\n        enableScroll()\n        return null\n    }\n\n    return (\n        <>\n            {\n                loading_handler(is_page_loading)\n            }\n            {\n                console.log(\"Loading\")\n            }\n            <div className=\"mainBody\">\n                <div className=\"headerMenuContainer\">\n                    <div className=\"headerMenuInnerContainer\">\n                        <div onClick={() => setPageSelector(\"landing\")}>\n                            <span>LOGIN</span>\n                        </div>\n                        <div onClick={() => setPageSelector(\"calc\")}>\n                            <span>CALC</span>\n                        </div>\n                        <div onClick={() => setPageSelector(\"kval\")}>\n                            <span>KVALTIDER</span>\n                        </div>\n                        {/* \n                        \n                        RELAY FUNCTION IS UNSTAGED \n\n                        <div onClick={()=> setPageSelector(\"relay\")}>\n                            <span>RELAY</span>\n                        </div> */}\n                    </div>\n                </div>\n                <div className=\"titleContainer\">\n                    {mainTitle}\n                </div>\n                <svg className=\"waves\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\n                    <path fill=\"#fff\" d=\"M0,96L80,101.3C160,107,320,117,480,149.3C640,181,800,235,960,229.3C1120,224,1280,160,1360,128L1440,96L1440,320L1360,320C1280,320,1120,320,960,320C800,320,640,320,480,320C320,320,160,320,80,320L0,320Z\"></path>\n                </svg>\n                {\n                    showPage()\n                }\n            </div >\n        </>\n    )\n}\n\n\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <LandingPage />\n    </Provider>\n    , document.querySelector(\"#root\")\n)",["32","33"],"/home/nils/programing/swimcalc/src/redux/reducers.jsx",[],"/home/nils/programing/swimcalc/src/calculator/calc.jsx",[],"/home/nils/programing/swimcalc/src/landing/landing.jsx",["34","35"],"import axios from \"axios\"\nimport { useEffect, useState } from \"react\"\nimport { store } from \"../index\"\nimport _ from \"lodash\"\n\nconst useLandingPage = () => {\n\n    const [isLoggedInPage, setIsLoggedInPage] = useState(false)\n    const [cancelCheck, setCancelCheck] = useState(false)\n\n    useEffect(() => {\n        if (store.getState()?.user?.data !== undefined && !cancelCheck) {\n            if (Object.keys(store.getState().user.data).length > 0){\n                setIsLoggedInPage(true)\n            } \n        }\n    }, [store.getState()])\n\n    const getPage = async (name, sur_name) => {\n        console.log(\"getPage\")\n        store.dispatch({\n            type: \"LOADING\",\n            payload: true\n        })\n        await axios.post(\"/tempus/find\", {\n            name,\n            sur_name\n        })\n            .then(res => {\n                store.dispatch({\n                    type: \"USER_SEARCH_FIELDS\",\n                    payload: res.data\n                })\n            })\n        console.log(\"done\")\n        store.dispatch({\n            type: \"LOADING\",\n            payload: false\n        })\n    }\n\n    const selectUser = async (index) => {\n        setIsLoggedInPage(true)\n        setCancelCheck(false)\n\n        store.dispatch({\n            type: \"LOADING\",\n            payload: true\n        })\n\n        await store.dispatch({ //adding user gender\n            type: \"USER_INFO\",\n            payload: {\n                gender: store.getState().user.searchField[index].gender,\n                name: store.getState().user.searchField[index].name,\n                sur_name: store.getState().user.searchField[index].sur_name,\n                age: store.getState().user.searchField[index].age,\n                status: store.getState().user.searchField[index].status\n            }\n        })\n\n        await axios.post(\"/tempus/selectUser\", {\n            id: store.getState().user.searchField[index].id\n        })\n            .then(res => {\n                store.dispatch({\n                    type: \"LOADING\",\n                    payload: false\n                })\n                console.log(\"CHANGING USER DATA\")\n                console.log(res.data)\n                store.dispatch({\n                    type: \"USER_DATA\",\n                    payload: res.data\n                })\n            })\n\n        // add to session storage\n        localStorage.setItem(\"user\", JSON.stringify(store.getState().user))\n    }\n\n    const inputHandler = (e) => {\n        e.preventDefault()\n        if (e.target.name.value === \"\") {\n            getPage(\"nils\", \"malmberg\")\n            return\n        }\n        getPage(e.target.name.value, e.target.surName.value)\n    }\n\n    const displayList = () => {\n        let retrunArr = []\n        if (store.getState()?.user?.searchField === undefined) return\n        store.getState().user.searchField.forEach((element, index) => {\n            const e = (\n                <div key={_.uniqueId()} className=\"listEDefault\" onClick={() => selectUser(index)} style={{ gridRow: `${index + 1}/${index + 2}` }}>\n                    <div key={_.uniqueId()} className=\"nameDiv\">\n                        <span key={_.uniqueId()}>{element.name + \" \" + element.sur_name}</span>\n                    </div>\n                    <div key={_.uniqueId()} className=\"ageDiv\">\n                        <span key={_.uniqueId()}>{element.age}</span>\n                    </div>\n                    <div key={_.uniqueId()} className=\"genderDiv\">\n                        <span key={_.uniqueId()}>{element.gender}</span>\n                    </div>\n                    <div key={_.uniqueId()} className=\"organization\">\n                        <span key={_.uniqueId()}>{element.organization}</span>\n                    </div>\n                </div>\n            )\n            retrunArr.push(e)\n        });\n        return retrunArr\n    }\n\n    const changeUserFunc = async () => {\n        localStorage.setItem(\"user\", null)\n        setIsLoggedInPage(false)\n        setCancelCheck(true)\n        await store.dispatch({\n            type: \"CLR_USER\",\n            payload: []\n        })\n    }\n\n    if (isLoggedInPage) {\n        return (\n            <div className=\"isLoggedInMainDiv\">\n                <span>Logged in as: {store.getState().user.info.name + \" \" + store.getState().user.info.sur_name}</span>\n                <button onClick={changeUserFunc}>CHANGE USER</button>\n            </div>\n        )\n    }\n    return (\n        <div className=\"landingPageMainDiv\">\n            <div className=\"titleDiv\">\n                {/* <span onClick={() => getPage()}>Enter your name to login</span>\n                <span onClick={() => selectUser(\"AI3504\")}>CLICK ME!</span> */}\n                {/* <span onClick={()=> selectUser(\"AI6711\")}>CLICK ME!</span> */}\n                <span>LINK WITH TEMPUS OPEN</span>\n                <div className=\"titleLine\" />\n            </div>\n            <div className=\"inputMainDiv\">\n                <form className=\"inputContainer\" onSubmit={inputHandler}>\n                    <div className=\"inputDefault nameContainer\">\n                        <span>Name</span>\n                        <input type=\"text\" name=\"name\" id=\"name\" />\n                    </div>\n                    <div className=\"inputDefault surNameContainer\">\n                        <span>Surname</span>\n                        <input type=\"text\" name=\"surName\" id=\"surName\" />\n                    </div>\n                    <div className=\"inputDefault OrganizationContainer\">\n                        <span>Organization</span>\n                        <input type=\"text\" name=\"organization\" id=\"organization\" />\n                    </div>\n                    <div className=\"inputButton\">\n                        <button type=\"submit\">Go!</button>\n                    </div>\n                </form>\n            </div>\n            <div className=\"userListMainDiv\">\n                {store.getState() ?\n                    displayList() :\n                    null\n                }\n                <div className=\"extraSpace\" />\n            </div>\n        </div>\n    )\n\n}\n\nexport default useLandingPage","/home/nils/programing/swimcalc/src/kvaltider/kvaltider.jsx",["36","37","38","39","40","41","42"],"import { store } from \"..\"\nimport axios from \"axios\"\nimport { useState } from \"react\"\nimport { useEffect } from \"react\"\nimport _ from \"lodash\"\n\n\nconst useKvaltider = () => {\n\n    const [competitionList, setCompetitionList] = useState()\n    const [selectedCompetition, setSelectedCompetition] = useState(\"\")\n    const [list, setlist] = useState(null)\n\n    const [pool, setPool] = useState(\"25\")\n\n    useEffect(async () => {\n        await axios.post(\"/competitions\")\n            .then((res) => {\n                store.dispatch({\n                    type: \"COMPETITIONS\",\n                    payload: res.data\n                })\n            })\n\n\n        let returnList = []\n        Object.keys(store.getState().competitions).forEach(key => {\n            const option = (\n                <option value={key}>{key}</option>\n            )\n            returnList.push(option)\n        });\n        setCompetitionList(returnList)\n    }, [])\n\n    const checkAge = (age) => { // types: intager, span, lower, upper, open\n\n        const get_type = (input_age)=>{\n\n            if (input_age.includes(\"_lower\")) return \"upper\"\n\n            if (input_age.includes(\"_upper\")) return \"lower\"\n\n            if (input_age.includes(\"open\")) return \"open\"\n\n            if (input_age > 200) return \"span\"\n\n            return \"intager\"\n\n        }\n\n        const type = get_type(age)\n\n        console.log(type)\n\n        let age_lower\n        let age_upper\n\n        console.log(\"TYPE: \", type)\n\n        if (type == \"span\"){\n            age_lower = parseInt(age.toString().slice(0,2))\n            age_upper = parseInt(age.toString().slice(2,4))\n        }else if (type == \"intager\"){\n            age_lower = age\n            age_upper = age\n        }else if (type == \"lower\") {\n            age_lower = parseInt(age.slice(0,2))\n            age_upper = 1000\n        }else if (type == \"upper\") {\n            age_lower = 0\n            age_upper = parseInt(age.slice(0,2))\n        }else if (type == \"open\"){\n            age_lower = 0\n            age_upper = 1000\n        }\n\n        const date = new Date()\n        const userAge = parseInt(date.getFullYear()) - parseInt(store.getState().user.info.age)\n\n        console.log(\"USER_AGE: \", userAge, \"LOWER: \", age_lower, \"UPPER: \", age_upper)\n\n        if (userAge <= age_upper && userAge >= age_lower) {\n            return age\n        }\n        return false\n    }\n\n    const checkQ = (qtime, ytime) => {\n        if (qtime > ytime) return true\n        return false\n    }\n\n    useEffect(() => {\n        //console.log(\"store.getState()?.user?.data: \", store.getState()?.user?.data)\n        if (store.getState()?.competitions[selectedCompetition] !== undefined && store.getState()?.user?.data !== undefined && store.getState()?.user?.info?.gender !== undefined) {\n            let returnArr = []\n            let ageGroupFound = false\n            let duplicateCheck = []\n            let value = store.getState().competitions[selectedCompetition][store.getState().user.info.gender.toLowerCase()][pool]\n            if (Object.keys(store.getState().competitions[selectedCompetition][store.getState().user.info.gender.toLowerCase()]).length > 2) value = store.getState().competitions[selectedCompetition][store.getState().user.info.gender.toLowerCase()][Object.keys(store.getState().competitions[selectedCompetition][store.getState().user.info.gender.toLowerCase()])[0]]\n            console.log(\"VALUE: \", value, Object.keys(store.getState().competitions[selectedCompetition][store.getState().user.info.gender.toLowerCase()])[0], store.getState().competitions[selectedCompetition][store.getState().user.info.gender.toLowerCase()][Object.keys(store.getState().competitions[selectedCompetition][store.getState().user.info.gender.toLowerCase()])[0]])\n            Object.keys(value).forEach(age => { // to age\n                age = checkAge(age)\n                if (!age) {\n                    return\n                }\n                Object.keys(store.getState().competitions[selectedCompetition][store.getState().user.info.gender.toLowerCase()][pool][age]).forEach(style => { // to style\n                    ageGroupFound = true\n                    Object.keys(store.getState().competitions[selectedCompetition][store.getState().user.info.gender.toLowerCase()][pool][age][style]).forEach(distance => { // to distance\n                        //console.log(\"Time: \", store.getState().competitions[selectedCompetition][store.getState().user.info.gender.toLowerCase()][pool][age][style][distance], \"Style: \", style, \"Distance: \", distance)\n                        //console.log(\"USERDATA: \", store.getState().user.data?.[pool]?.[style]?.[distance]?.time)\n\n                        let isDuplicate = false\n                        duplicateCheck.forEach(element => {\n                            if (element === distance + style) isDuplicate = true\n                        })\n                        duplicateCheck.push(distance + style)\n                        if (isDuplicate) return\n\n                        if (store.getState().user.data?.[pool]?.[style]?.[distance]?.time !== undefined) { // making sure the swimmer has a valid time \n                            let addClass = \"not_qualified\"\n                            let Qmessage = \"NOT QUALIFIED\"\n                            if (checkQ(store.getState().competitions[selectedCompetition][store.getState().user.info.gender.toLowerCase()][pool][age][style][distance], store.getState().user.data[pool][style][distance].time)) {\n                                addClass = \"qualified\"\n                                Qmessage = \"QUALIFIED\"\n                            }\n\n                            const div = (\n                                <div key={_.uniqueId()} className={\"listDiv \" + addClass}>\n                                    <div key={_.uniqueId()} className=\"distanceDiv\">\n                                        <span key={_.uniqueId()}>{distance}</span>\n                                        <span key={_.uniqueId()}>{style.toUpperCase()}</span>\n                                    </div>\n                                    <div key={_.uniqueId()} className=\"Qmessage\">\n                                        <span key={_.uniqueId()} >{Qmessage}</span>\n                                    </div>\n                                    <div key={_.uniqueId()} className=\"QtimeDiv\">\n                                        <span key={_.uniqueId()}>Q-Time</span>\n                                        <span key={_.uniqueId()}>{store.getState().competitions[selectedCompetition][store.getState().user.info.gender.toLowerCase()][pool][age][style][distance]}</span>\n                                    </div>\n                                    <div key={_.uniqueId()} className=\"YtimeDiv\">\n                                        <span key={_.uniqueId()}>Your-Time</span>\n                                        <span key={_.uniqueId()}>{store.getState().user.data[pool][style][distance].time}</span>\n                                    </div>\n                                </div>\n                            )\n                            returnArr.push(div)\n                        }\n                    })\n                })\n            })\n            if (!ageGroupFound) {\n                console.log(\"NO AGE FOUND\")\n                return setlist(\n                    <div className=\"toOldDiv\">\n                        <span>TO OLD</span>\n                    </div>\n                )\n            }\n            setlist(returnArr)\n        } else {\n            setlist(null)\n        }\n    }, [selectedCompetition])\n\n\n    return (\n        <div className=\"kvaltiderMainDiv\">\n            <div className=\"selectCompetition\">\n                <span>COMPETITION</span>\n                <select name=\"competition\" id=\"competition\" selected={selectedCompetition} onChange={(e)=> setSelectedCompetition(e.target.value)}>\n                    <option value=\"\"/>\n                    {competitionList}\n                </select>\n            </div>\n            <div className=\"selectPool\">\n                <span>POOL</span>\n                <select onChange={(e) => setPool(e.target.value)} name=\"pool\" id=\"pool\">\n                    <option value=\"25\">25</option>\n                    <option value=\"50\">50</option>\n                </select>\n            </div>\n            <div className=\"kvalList\">\n                {list}\n            </div>\n        </div>\n    )\n}\n\nexport default useKvaltider","/home/nils/programing/swimcalc/src/relay/relay.jsx",["43","44","45","46","47","48"],"import { store } from \"..\"\nimport axios from \"axios\"\nimport { useState } from \"react\"\nimport { useEffect } from \"react\"\nimport _ from \"lodash\"\nimport moment from \"moment\"\n\nconst User_login = ({setPage, store})=>{\n\n    const getPage = async (name, sur_name) => {\n        store.dispatch({\n            type: \"LOADING\",\n            payload: true\n        })\n        await axios.post(\"/tempus/find\", {\n            name,\n            sur_name\n        })\n            .then(res => {\n                store.dispatch({\n                    type: \"USER_SEARCH_FIELDS\",\n                    payload: res.data\n                })\n            })\n        store.dispatch({\n            type: \"LOADING\",\n            payload: false\n        })\n    }\n\n    const selectUser = async (index) => {\n\n        await store.dispatch({ //adding user gender\n            type: \"RELAY_USER_INFO\",\n            payload: {\n                gender: store.getState().user.searchField[index].gender,\n                name: store.getState().user.searchField[index].name,\n                sur_name: store.getState().user.searchField[index].sur_name,\n                age: store.getState().user.searchField[index].age,\n                status: store.getState().user.searchField[index].status\n            }\n        })\n\n        axios.post(\"/tempus/selectUser\", {\n            id: store.getState().user.searchField[index].id\n        })\n            .then(res => {\n                store.dispatch({\n                    type: \"RELAY_USER_DATA\",\n                    payload: res.data\n                })\n                // add session storage\n                localStorage.setItem(\"relay\", JSON.stringify(store.getState().relay))\n            })\n        \n\n        setPage(\"main\")\n    }\n\n    const inputHandler = (e) => {\n        e.preventDefault()\n        if (e.target.name.value === \"\") {\n            getPage(\"nils\", \"malmberg\")\n            return\n        }\n        getPage(e.target.name.value, e.target.surName.value)\n    }\n\n    const displayList = () => {\n        let retrunArr = []\n        if (store.getState()?.user?.searchField === undefined) return\n        store.getState().user.searchField.forEach((element, index) => {\n            const e = (\n                <div key={_.uniqueId()} className=\"listEDefault\" onClick={() => selectUser(index)} style={{ gridRow: `${index + 1}/${index + 2}` }}>\n                    <div key={_.uniqueId()} className=\"nameDiv\">\n                        <span key={_.uniqueId()}>{element.name + \" \" + element.sur_name}</span>\n                    </div>\n                    <div key={_.uniqueId()} className=\"ageDiv\">\n                        <span key={_.uniqueId()}>{element.age}</span>\n                    </div>\n                    <div key={_.uniqueId()} className=\"genderDiv\">\n                        <span key={_.uniqueId()}>{element.gender}</span>\n                    </div>\n                    <div key={_.uniqueId()} className=\"organization\">\n                        <span key={_.uniqueId()}>{element.organization}</span>\n                    </div>\n                </div>\n            )\n            retrunArr.push(e)\n        });\n        return retrunArr\n    }\n\n\n    return (\n        <div className=\"landingPageMainDiv\">\n            <div className=\"titleDiv\">\n                {/* <span onClick={() => getPage()}>Enter your name to login</span>\n                <span onClick={() => selectUser(\"AI3504\")}>CLICK ME!</span> */}\n                {/* <span onClick={()=> selectUser(\"AI6711\")}>CLICK ME!</span> */}\n                <span>Add user to relay pool</span>\n                <div className=\"titleLine\" />\n            </div>\n            <div className=\"inputMainDiv\">\n                <form className=\"inputContainer\" onSubmit={inputHandler}>\n                    <div className=\"inputDefault nameContainer\">\n                        <span>Name</span>\n                        <input type=\"text\" name=\"name\" id=\"name\" />\n                    </div>\n                    <div className=\"inputDefault surNameContainer\">\n                        <span>Surname</span>\n                        <input type=\"text\" name=\"surName\" id=\"surName\" />\n                    </div>\n                    <div className=\"inputDefault OrganizationContainer\">\n                        <span>Organization</span>\n                        <input type=\"text\" name=\"organization\" id=\"organization\" />\n                    </div>\n                    <div className=\"inputButton\">\n                        <button type=\"submit\">Go!</button>\n                    </div>\n                </form>\n            </div>\n            <div className=\"userListMainDiv\">\n                {store.getState() ?\n                    displayList() :\n                    null\n                }\n                <div className=\"extraSpace\" />\n            </div>\n        </div>\n    )\n}\n\nconst useRelay = ()=>{\n\n    // get course, distance\n\n    // get info from swimmer\n\n        // create page to login multiple swimmers\n        // send loged in swimmers to a favorites list and save to cookies\n\n    // calc every outcome from pool of swimmers\n    \n    // choose the amount of teams generated\n\n    // generate and display teams\n\n    // profit\n\n    const [page, setPage] = useState(\"main\")\n    const [pool, setPool] = useState(\"25\")\n    const [distance, setDistance] = useState(25)\n    const [stroke, setStroke] = useState(\"fr\")\n    const [calcTeamBtn, setCalcTeamBtn] = useState(false)\n    const [team_list, setTeam_list] = useState(null)\n\n    const remove_user_from_pool= (index)=>{\n        \n        let data = store.getState().relay?.data\n        let info = store.getState().relay?.info\n\n        data.splice(index, 1)\n        info.splice(index, 1)\n\n        store.dispatch({ //adding user gender\n            type: \"RELAY_REMOVE_USER\",\n            payload: {\n                data: data,\n                info: info\n            }\n        })\n        // update session storage\n        localStorage.setItem(\"relay\", JSON.stringify(store.getState().relay))\n    }\n\n    const displayList = () => {\n        let retrunArr = []\n        if (store.getState()?.relay?.info === undefined) return\n        store.getState().relay.info.forEach((element, index) => {\n            const e = (\n                <div key={_.uniqueId()} className=\"listEDefault\">\n                    <div className=\"info_pool\">\n                        <div key={_.uniqueId()} className=\"nameDiv\">\n                            <span key={_.uniqueId()}>{element.name + \" \" + element.sur_name}</span>\n                        </div>\n                        <div key={_.uniqueId()} className=\"ageDiv\">\n                            <span key={_.uniqueId()}>{element.age}</span>\n                        </div>\n                        <div key={_.uniqueId()} className=\"organization\">\n                            <span key={_.uniqueId()}>{element.organization}</span>\n                        </div>\n                    </div>\n                    <button key={index} onClick={()=>{remove_user_from_pool(index)}}>Remove</button>\n                </div>\n            )\n            retrunArr.push(e)\n        });\n        return retrunArr\n    }\n\n    const calc_teams = ()=>{\n        setCalcTeamBtn(true)\n\n        console.log(\"pool: \", pool)\n        console.log(\"distance: \", distance)\n        console.log(\"stroke: \", stroke)\n\n\n        if (store.getState()?.relay?.info === undefined) return \n\n        if (store.getState()?.relay?.data?.length < 4){\n            console.log(\"Not enough swimmers for a team\")\n            return\n        }\n\n        let time_arr = []\n        let tot_time = moment.duration()\n\n        store.getState().relay.data.forEach((elm, index) =>{\n            if (elm[pool]?.[stroke]?.[distance]?.time === undefined){\n                console.log(\"NOT ALL SWIMMERS HAVE SWAM THIS DISTANCE\")\n                tot_time = \"NO TIME\"\n                time_arr.push([\n                    index,\n                    0,\n                    \"NO TIME\",\n                ])\n                return\n            }\n            const info = store.getState().relay.info[index]\n            console.log(\"Name: \", info.name)\n            console.log(\"Time: \", elm[pool][stroke][distance].time)\n\n            let time = elm[pool][stroke][distance].time\n\n            if (moment.isDuration(tot_time)){\n                tot_time.\n                    add(parseInt(time.split(\":\").splice(0)), \"m\").\n                    add(parseInt(time.split(\":\").splice(1)), \"s\").\n                    add(parseInt(time.split(\".\").splice(1)), \"ms\")\n            }\n\n            time_arr.push([\n                index,\n                moment(time, \"mm:ss.SS\").valueOf(),\n                time,\n            ])\n        })\n\n\n        function sortFunction(a, b) {\n            if (a[1] === b[1]) {\n                return 0;\n            }\n            else {\n                return (a[1] < b[1]) ? -1 : 1;\n            }\n        }\n\n        time_arr.sort(sortFunction)\n\n        let returnArr = []\n\n        time_arr.forEach((elm)=>{\n            let index = elm[0]\n            let element = store.getState().relay.info[index]\n            const e = (\n                <div key={_.uniqueId()} className=\"listEDefault\">\n                    <div className=\"info_pool\">\n                        <div key={_.uniqueId()} className=\"nameDiv\">\n                            <span key={_.uniqueId()}>{element.name + \" \" + element.sur_name}</span>\n                        </div>\n                        <div key={_.uniqueId()} className=\"ageDiv\">\n                            <span key={_.uniqueId()}>{elm[2]}</span>\n                        </div>\n                    </div>\n                    <div className=\"stroke_header\">\n                        <span>{stroke.toUpperCase()}</span>\n                    </div>\n                </div>\n            )\n            returnArr.push(e)\n\n        })\n\n        let time_str = tot_time\n        if (moment.isDuration(tot_time)){\n            time_str = `${tot_time.get(\"m\")}:${tot_time.get(\"s\")}.${tot_time.get(\"ms\").toString().slice(0, -1)}`\n            if (parseInt(tot_time.get(\"s\")) < 10){\n                time_str = `${tot_time.get(\"m\")}:0${tot_time.get(\"s\")}.${tot_time.get(\"ms\").toString().slice(0, -1)}`\n            }\n        }\n\n\n        console.log(time_str)\n\n        returnArr.push(\n            <>\n            <div className=\"team_info\">\n                <div className=\"result_menu\">\n                    <span className=\"header\">Total time</span>\n                    <span className=\"time\">{time_str}</span>\n                </div>\n                <div className=\"reset_teams\">\n                    <button onClick={()=>{setCalcTeamBtn(false)}}>Reset Teams</button>\n                </div>\n            </div>\n            </>\n        )\n\n        setTeam_list(returnArr)\n\n    }\n\n    const main_page = ()=>{\n        return (\n            <div className=\"relayMainBody\">\n                <div className=\"info\">\n                    <div className=\"course select_default\">\n                        <span>COURSE:</span>\n                        <select onChange={(e) => setPool(e.target.value)} name=\"course\" id=\"course\">\n                            <option value=\"25\">25</option>\n                            <option value=\"50\">50</option>\n                        </select>\n                    </div>\n                    <div className=\"distance select_default\">\n                        <span>DISTANCE</span>\n                        <select onChange={(e) => setDistance(e.target.value)} name=\"distance\" id=\"distance\">\n                            <option value=\"25\">25</option>\n                            <option value=\"50\">50</option>\n                            <option value=\"100\">100</option>\n                            <option value=\"200\">200</option>\n                        </select>\n                    </div>\n                    <div className=\"stroke select_default\">\n                        <span>STROKE</span>\n                        <select onChange={(e) => setStroke(e.target.value)} name=\"stroke\" id=\"stroke\">\n                            <option value=\"fr\">FREE</option>\n                            <option value=\"br\">BREST</option>\n                            <option value=\"ry\">BACK</option>\n                            <option value=\"fj\">FLY</option>\n                        </select>\n                    </div>\n                </div>\n                <div className=\"swimmer_pool\">\n                    <div className=\"pool_info\">\n                        <span>Swimmer pool</span>\n                        <button onClick={()=>{setPage(\"user_login\")}}>Add +</button>\n                    </div>\n                    {\n                        store.getState()?.relay?.info?.[0] ? \n                        <div className=\"swimmer_pool_list\">\n                            {store.getState() ?\n                                displayList() :\n                                null\n                            }\n                        </div>\n                        :\n                        null\n                    }\n                </div>\n                {\n                    store.getState()?.relay?.info?.[0] ? \n                    <div className=\"result_div\">\n                        <div className=\"menu\">\n                            {\n                                calcTeamBtn ? \n                                <>\n                                    <span>TEAMS</span>\n                                    <div className=\"line_seperator\"/>\n                                </>\n                                :\n                                <button onClick={()=>{calc_teams()}}>Go!</button>\n                            }\n                        </div>\n                        <div className=\"teams\">\n                            {\n                                calcTeamBtn ? \n                                <div className=\"teams_list\">\n                                        {team_list}\n                                </div>\n                                :\n                                null\n                            }\n                        </div>\n                    </div>\n                    :\n                    null\n                }\n            </div>\n        )\n    }\n    const show_page = ()=>{\n        switch(page){\n            case \"main\":\n                return main_page()\n            case \"user_login\":\n                return <User_login setPage={setPage} store={store}/>\n        }\n    }\n\n\n    return show_page()\n\n} \n\nexport default useRelay",{"ruleId":"49","severity":1,"message":"50","line":51,"column":8,"nodeType":"51","endLine":51,"endColumn":16,"suggestions":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"49","severity":1,"message":"57","line":17,"column":8,"nodeType":"51","endLine":17,"endColumn":26,"suggestions":"58"},{"ruleId":"49","severity":1,"message":"59","line":17,"column":9,"nodeType":"60","endLine":17,"endColumn":25},{"ruleId":"49","severity":1,"message":"61","line":16,"column":15,"nodeType":"62","endLine":34,"endColumn":6},{"ruleId":"63","severity":1,"message":"64","line":61,"column":18,"nodeType":"65","messageId":"66","endLine":61,"endColumn":20},{"ruleId":"63","severity":1,"message":"64","line":64,"column":24,"nodeType":"65","messageId":"66","endLine":64,"endColumn":26},{"ruleId":"63","severity":1,"message":"64","line":67,"column":24,"nodeType":"65","messageId":"66","endLine":67,"endColumn":26},{"ruleId":"63","severity":1,"message":"64","line":70,"column":24,"nodeType":"65","messageId":"66","endLine":70,"endColumn":26},{"ruleId":"63","severity":1,"message":"64","line":73,"column":24,"nodeType":"65","messageId":"66","endLine":73,"endColumn":26},{"ruleId":"49","severity":1,"message":"67","line":165,"column":8,"nodeType":"51","endLine":165,"endColumn":29,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":4,"column":10,"nodeType":"71","messageId":"72","endLine":4,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":238,"column":25,"nodeType":"75","messageId":"76","endLine":238,"endColumn":26,"fix":"77"},{"ruleId":"73","severity":1,"message":"74","line":239,"column":66,"nodeType":"75","messageId":"76","endLine":239,"endColumn":67,"fix":"78"},{"ruleId":"73","severity":1,"message":"74","line":240,"column":66,"nodeType":"75","messageId":"76","endLine":240,"endColumn":67,"fix":"79"},{"ruleId":"80","severity":1,"message":"81","line":395,"column":9,"nodeType":"82","messageId":"83","endLine":400,"endColumn":10},{"ruleId":"84","severity":1,"message":"85","line":399,"column":24,"nodeType":"86","messageId":"87","endLine":399,"endColumn":69},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'unsubscribe'. Either include it or remove the dependency array.","ArrayExpression",["88"],"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"React Hook useEffect has a missing dependency: 'cancelCheck'. Either include it or remove the dependency array.",["91"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'pool'. Either include it or remove the dependency array.",["92"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"93","text":"94"},{"range":"95","text":"94"},{"range":"96","text":"94"},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/jsx-pascal-case","Imported JSX component User_login must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase",{"desc":"97","fix":"98"},"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},[8263,8285],"\n                    .",[8330,8352],[8397,8419],"Update the dependencies array to be: [unsubscribe, update]",{"range":"103","text":"104"},"Update the dependencies array to be: [cancelCheck]",{"range":"105","text":"106"},"Update the dependencies array to be: [pool, selectedCompetition]",{"range":"107","text":"108"},[1773,1781],"[unsubscribe, update]",[519,537],"[cancelCheck]",[7556,7577],"[pool, selectedCompetition]"]